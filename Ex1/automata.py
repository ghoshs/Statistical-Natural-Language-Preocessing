import numpy as np
import operator
import math
import matplotlib.pyplot as plt


if __name__ == '__main__':
	p = ['s', 'a'] # an array to denote transitions s for space and a for alphabet
	alpha = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'] #an array for storing alphabets
	word_count = 10000 # length of the document to be generated
	text = ''
	state = 0 # initial state of the automata

	# generate words till word count is 10000
	for i in range(word_count):
		while True:
			chance = np.random.choice(p, p=[0.2,0.8])
			if chance == 'a':
				state = 1 # word generating state
				text += np.random.choice(alpha)
			chance = np.random.choice(p, p=[0.2,0.8])
			if state == 1 and chance == 's': # return to state 0 only after atleast one alphabet is generated
				text += ' '
				state = 0
				# print ('Word no: '+str(i+1))
				break

	# create a word dictionary of the generated text
	word_dict = {}
	for word in text.split(' '):
		if word not in word_dict:
			word_dict[word] = 1
		else:
			word_dict[word] += 1

	# sort the dictionary according to rank of words
	ranked = sorted(word_dict.items(), key=operator.itemgetter(1), reverse=True)
	print('-----------------------Using naive automata-----------------------')
	print('Number of unique words: '+str(len(ranked)))
	print('Top 10 words:')
	for i in range(10):
		print ranked[i][0]

	# create the plot for log values of rank and frequencies
	x1 = [math.log(x+1) for x in np.arange(len(ranked))]
	y1 = [math.log(x) for i, x in ranked]
	random, = plt.plot(x1, y1, 'r-', label='text generated by automata')
	plt.xlabel('Log Word Rank')
	plt.ylabel('Log Frequencies')
	plt.legend(handles=[random])
	plt.savefig('ZipfRandomText.png')


	# find prob of each character
	char_probability = {}
	total_occurence =0 

	for character in text:
		if character not in char_probability: # check if frequency count for the alphabet already exists in the dictionary
			char_probability[character] = 1
		else:
			char_probability[character] += 1
		total_occurence += 1 # total number of characters

	for x in char_probability:
		char_probability[x] = char_probability[x]/float(total_occurence)

	ranked_probability = sorted(char_probability.items(), key=operator.itemgetter(1), reverse=True)	

	# plot the probability of each character
	x = np.arange(27)
	y = np.array([i[1] for i in ranked_probability])
	plt.figure()
	plt.plot(x, y, 'go', label='character probability')
	my_xticks = [x[0] for x in ranked_probability]
	plt.xlabel('Alphabets')
	plt.ylabel('Probability')
	plt.savefig('LetterProbability.png')

	#### Realistic automata
	new_char_probability ={}
	char_arr = []
	char_prob = []
	total_occurence = 0.0

	# compute the relative frequency of a-z and space from an English text
	fp = open('ACCEnglish.txt','rb')
	for sent in fp:
		for char in sent:
			if char in alpha or char == ' ':
				if char not in new_char_probability:
					new_char_probability[char] = 1
				else:
					new_char_probability[char] += 1
				total_occurence += 1.0

	for x in new_char_probability:
		char_arr.append(x)
		char_prob.append(new_char_probability[x]/total_occurence)

	#generate new random text using the new probability distribution
	new_text = ''
	for i in range(word_count):
		while True:
			chance = np.random.choice(char_arr, p=char_prob)
			new_text += chance
			if chance == ' ':
				# print('Word no: '+str(i+1))
				break

	# create word dictionary for the new distribution
	new_word_dict = {}
	for word in new_text.split(' '):
		if word not in new_word_dict:
			new_word_dict[word] = 1
		else:
			new_word_dict[word] += 1

	# sort the words on their frequency
	ranked = sorted(new_word_dict.items(), key=operator.itemgetter(1), reverse=True)
	print('---------------------Using realistic probabilities---------------------')
	print('Number of unique words: '+str(len(ranked)))
	print('Top 10 words:')
	for i in range(10):
		print ranked[i][0]
	x1 = [math.log(x+1) for x in np.arange(len(ranked))]
	y1 = [math.log(x) for i, x in ranked]
	plt.figure()
	random, = plt.plot(x1, y1, 'r-', label='text generated from realistic automata')
	plt.xlabel('Log Word Rank')
	plt.ylabel('Log Frequencies')
	plt.legend(handles=[random])
	plt.savefig('ZipfRealistic.png')